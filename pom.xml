<project
    xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.LJK</groupId>
    <artifactId>SSH_5</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>war</packaging>
    <name>ssm maven web</name> <!-- name 与项目名独立 -->
    <description>null</description>

    <!-- 资源文件 -->
    <!-- 相当于导入了一个 properties 文件，在后面可以使用 ${} 来调用。方便修改 -->
    <properties>
        <!-- jdk 版本号 -->
        <jdk.version>1.8</jdk.version>

        <!-- Spring 版本号 -->
        <spring.version>4.1.1.RELEASE</spring.version>
        <!-- mybatis 版本号 -->
        <mybatis-version>3.3.0</mybatis-version>
        <!-- mybatis-spring 版本号 -->
        <mybatis-spring-version>1.2.3</mybatis-spring-version>
        <!-- log4j日志文件管理包版本 -->
        <slf4j-version>1.7.12</slf4j-version>
        <log4j-version>1.2.17</log4j-version>

        <!-- 其他包版本 -->
        <cxf.version>2.7.15</cxf.version>
        <!-- 编码格式 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!-- 储藏库 -->
    <repositories>
        <!-- 本地库 -->
        <repository>
            <id> localRepository</id>
            <name> Maven Repository Switchboard</name>
            <layout> default</layout> <!-- 默认使用本地库 -->
            <!-- 可以修改为自己的服务器，或者公司的服务器。这里使用的是阿里的服务器 -->
            <url> http://maven.aliyun.com/nexus/content/groups/public/</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>

        <!-- 中央库 -->
        <repository>
            <id> central</id>
            <name> Maven Repository Switchboard</name>
            <url> http://repo.maven.apache.org/maven2/</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>


    <!-- 包 -->
    <dependencies>
        <!-- Spring -->
        <!-- springframe start -->
        <!-- 包含所有使用 spring 版本号的包 -->
        
        <!-- Spring 核心包 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version> <!-- 通过资源文件来确定版本，相当于properties文件 -->
        </dependency>
        <!-- 包含Web应用开发时，用到Spring框架时所需的核心类 -->
        <!-- 自动载入WebApplicationContext特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类。 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- Spring IOC -->
        <!-- 基础实现，包含访问配置文件、创建和管理bean等。 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- Spring Context：在基础IOC功能上提供扩展服务 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- 基于注解的 AOP 包 -->
        <!-- 和 aspectj 配合使用 -->
        <!-- Spring的面向切面编程，提供AOP（面向切面编程）的实现 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
        </dependency>        
        
        <!-- Spring MVC -->
        <!-- SpringMVC框架相关的所有类 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- Spring context 的扩展支持，用于MVC方面。 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
        </dependency>         
        
        <!-- 数据库相关 -->
        <!-- 对于object/xml映射的支持，可以让JAVA与XML之间来回切换 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
            <version>${spring.version}</version>
        </dependency>
       <!-- 为JDBC、Hibernate、JDO、JPA等提供的一致的声明式和编程式事务管理。 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- Spring 对 JDBC 数据访问进行封装的所有类 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- 对 DAO特性集进行了扩展，使其支持 iBATIS、JDO、OJB、TopLink
	           Hibernate 已经独立成包 -->   
        <!-- 需要同时使用 Spring-dao 包 -->                    
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!-- Spring-test 包 -->
        <!-- 和 JUnit 一起使用 -->
        <!-- 对 JUnit 等测试框架的简单封装 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>             
         <!-- springframe end -->
        
                
        <!-- 数据库相关 -->
        <!-- mybatis 核心包 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>${mybatis-version}</version>
        </dependency>
        <!-- mybatis/spring 包 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>${mybatis-spring-version}</version>
        </dependency>
        <!-- 自动生成 CURD 文件 -->
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <version>1.3.2</version>
        </dependency>
        <!-- mysql 数据库驱动 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.37</version>
        </dependency>
        <!-- dbcp 的jar包，用来在 applicationContext.xml 中配置数据库 -->
        <dependency>
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
            <version>1.2.2</version>
        </dependency>
        <!-- c3p0 连接池 -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.1</version>
        </dependency>

        <!--测试 -->
        <!-- JUnit 单元测试工具 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <!-- 表示开发的时候引入，发布的时候不会加载此包 -->
            <scope>test</scope>
        </dependency>

        
        <!-- 日志配置 -->
        <!-- log start -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j-version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j-version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j-version}</version>
        </dependency>
        <!-- log end -->


        <!-- 阿里巴巴数据源包 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.25</version>
        </dependency>

        <!-- JSON -->
        <!-- 阿里巴巴 FastJson 是一个 Json 处理工具包 -->
        <!-- 格式化对象，方便输出日志 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.1</version>
        </dependency>

        <!-- jackson -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.8.2</version>
        </dependency>

        <!-- aspectJ AOP 织入器 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>1.8.8</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.8.8</version>
        </dependency>

        <!-- Servlet核心包 -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
        </dependency>
        <!-- javaee，企业级开发的jar包，类库 -->
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <version>7.0</version>
            <scope>provided</scope>
        </dependency>
        <!-- JSTL标签类 -->
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>javax.servlet.jsp.jstl</artifactId>
            <version>1.2.2</version>
        </dependency>

        <!-- 主要是一些公共的工具集合，比如对字符、数组的操作等等 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.3</version>
        </dependency>

        <!-- 文件上传 -->
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.3.2</version>
        </dependency>
    </dependencies>

    <build>
        <!-- Maven插件 -->
        <plugins>
            <!-- 编译插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <!-- 这个版本号 决定了 Maven 每次 update 的时候使用的JDK 版本 -->
                <!-- 如果不设置的话，将自动使用 3.0 以后默认的 JDK 1.6 ，maven的特性 -->
                <configuration>
                    <!-- 源代码使用的开发版本 -->
                    <source>1.8</source>
                    <!-- 需要生成的目标 class 文件的编译版本 -->
                    <target>1.8</target>
                </configuration>
            </plugin>
            
            <!-- 设置资源文件的编码方式  -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.4.3</version>
                <executions>  
                    <execution>  
                        <phase>compile</phase>  
                    </execution>  
                </executions>  
                <configuration>  
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <version>3.1</version>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>